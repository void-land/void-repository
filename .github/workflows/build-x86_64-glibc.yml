name: "Build void packages x86_64 Glibc"

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REPO_OWNER: "${{ github.repository_owner }}"
  REPO_NAME: "${{ github.event.repository.name }}"

jobs:
  build:
    name: Build Hyprland
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/void-linux/void-buildroot-${{ matrix.config.libc }}:20231230R1
      options: --platform ${{ matrix.config.platform }}
      env:
        PATH: "/usr/libexec/chroot-git:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/sbin:/usr/local/bin:/tmp/bin"
        ARCH: "${{ matrix.config.arch }}"
        BOOTSTRAP: "${{ matrix.config.host }}"
        TEST: "${{ matrix.config.test }}"
        HOSTREPO: /hostrepo

    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              arch: x86_64,
              host: x86_64,
              libc: glibc,
              platform: linux/amd64,
              test: 1,
            }

    steps:
      - name: Prepare container
        run: |
          mkdir -p /etc/xbps.d && cp /usr/share/xbps.d/*-repository-*.conf /etc/xbps.d/
          ls -la
          sed -i 's|repo-default|repo-ci|g' /etc/xbps.d/*-repository-*.conf
          xbps-install -Syu xbps
          xbps-install -Syu
          xbps-install -y tar curl openssl

      - name: Make void pkgs directory
        run: |
          cd $HOME

      - name: Clone Void-Packages and prepare
        run: |
          git clone --depth 1 https://github.com/void-linux/void-packages.git
          ls -la

      - name: Create hostrepo and prepare masterdir
        run: |
          cd void-packages
          ln -s "$(pwd)" /hostrepo &&
          common/travis/set_mirror.sh &&
          common/travis/prepare.sh &&
          common/travis/fetch-xtools.sh

      # All build steps
      # First Hyprland's dependencies
      - name: Chrome
        run: (/hostrepo/xbps-src -j$(nproc) -s pkg google-chrome)

      # We need to sign the packages with our private key so that they will be accepted by xbps remotely
      # See: https://docs.voidlinux.org/xbps/repositories/signing.html

      # - name: Generate Pam
      #   run: |
      #     export XBPS_PASSPHRASE=${{ secrets.PRIVATE_PEM_PASSPHRASE }}
      #     xbps-rindex --privkey ./private.pem --sign --signedby "${{ env.REPO_NAME }}-github-action" ~/hostdir/binpkgs
      #     xbps-rindex --privkey ./private.pem --sign-pkg ~/hostdir/binpkgs/*.xbps

      # - name: Sign repository
      #   run: |
      #     export XBPS_PASSPHRASE=${{ secrets.PRIVATE_PEM_PASSPHRASE }}
      #     xbps-rindex --privkey ./private.pem --sign --signedby "${{ env.REPO_NAME }}-github-action" ~/hostdir/binpkgs
      #     xbps-rindex --privkey ./private.pem --sign-pkg ~/hostdir/binpkgs/*.xbps

      # - name: Compress Packages
      #   run: |
      #     cd ~/hostdir/binpkgs
      #     tar -czvf pkgs.tar.gz *

      # - name: Upload artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ env.REPO_NAME }}
      #     path: ~/hostdir/binpkgs/pkgs.tar.gz

  # publish:
  #   name: Pack and Publish
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ${{ env.REPO_NAME }}
  #         path: ~/

  #     - name: Get current date
  #       run: echo "CURRENT_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.run_number }}
  #         release_name: Void Pkgs ${{ env.CURRENT_DATE }}

  #     - name: Upload Release Asset
  #       id: upload-release-asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: /home/runner/pkgs.tar.gz
  #         asset_name: void-pkgs-${{ env.CURRENT_DATE }}.tar.gz
  #         asset_content_type: application/gzip

  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Delete old repository and recreate with new packages
  #       run: |
  #         git config user.name "github-actions[bot]"
  #         git config user.email "github-actions[bot]@users.noreply.github.com"
  #         git push origin -d repository-x86_64-glibc
  #         git switch --orphan repository-x86_64-glibc
  #         tar -xvf ~/hyprland.tar.gz -C ./
  #         git add .
  #         git commit -m "Upload latest packages to repository"
  #         git push origin repository-x86_64-glibc
